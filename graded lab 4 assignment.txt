Create Table queries : 

CREATE TABLE supplier (
  supp_id INT NOT NULL AUTO_INCREMENT,
  supp_name VARCHAR(50) NOT NULL,
  supp_city VARCHAR(50) NOT NULL,
  supp_phone VARCHAR(50) NOT NULL,
  PRIMARY KEY (supp_id)
);

------------------------------------------------------------

CREATE TABLE customer (
  cus_id INT NOT NULL AUTO_INCREMENT,
  cus_name VARCHAR(20) NOT NULL,
  cus_phone VARCHAR(10) NOT NULL,
  cus_city VARCHAR(30) NOT NULL,
  cus_gender CHAR NOT NULL,
  PRIMARY KEY (cus_id)
);

------------------------------------------------------------


CREATE TABLE category (
  cat_id INT NOT NULL AUTO_INCREMENT,
  cat_name VARCHAR(20) NOT NULL,
  PRIMARY KEY (cat_id)
);


------------------------------------------------------------

CREATE TABLE product (
  pro_id INT NOT NULL AUTO_INCREMENT,
  pro_name VARCHAR(20) NOT NULL DEFAULT "Dummy",
  pro_desc VARCHAR(60),
  cat_id INT NOT NULL,
  PRIMARY KEY (pro_id),
  FOREIGN KEY (cat_id) REFERENCES category (cat_id)
);

------------------------------------------------------------

CREATE TABLE supplier_pricing (
  pricing_id INT NOT NULL AUTO_INCREMENT,
  pro_id INT NOT NULL,
  supp_id INT NOT NULL,
  supp_price INT DEFAULT 0,
  PRIMARY KEY (pricing_id),
  FOREIGN KEY (pro_id) REFERENCES product (pro_id),
  FOREIGN KEY (supp_id) REFERENCES supplier (supp_id)
);


------------------------------------------------------------

CREATE TABLE order (
  ord_id INT NOT NULL AUTO_INCREMENT,
  ord_amount INT NOT NULL,
  ord_date DATE NOT NULL,
  cus_id INT NOT NULL,
  pricing_id INT NOT NULL,
  PRIMARY KEY (ord_id),
  FOREIGN KEY (cus_id) REFERENCES customer (cus_id),
  FOREIGN KEY (pricing_id) REFERENCES supplier_pricing (pricing_id)
);


------------------------------------------------------------

CREATE TABLE rating (
  rat_id INT NOT NULL AUTO_INCREMENT,
  ord_id INT NOT NULL,
  rat_ratstars INT NOT NULL,
  PRIMARY KEY (rat_id),
  FOREIGN KEY (ord_id) REFERENCES order (ord_id)
);

--------------------------------------------------------------------------------------





Insert Table Queries


INSERT INTO supplier (supp_id, supp_name, supp_city, supp_phone)
VALUES
(1, 'Rajesh Retails', 'Delhi', '1234567890'),
(2, 'Appario Ltd.', 'Mumbai', '2589631470'),
(3, 'Knome products', 'Banglore', '9785462315'),
(4, 'Bansal Retails', 'Kochi', '8975463285'),
(5, 'Mittal Ltd.', 'Lucknow', '7898456532');

------------------------------------------------------------

INSERT INTO customer (cus_id, cus_name, cus_phone, cus_city, cus_gender)
VALUES
(1, 'AAKASH', '9999999999', 'DELHI', 'M'),
(2, 'AMAN', '9785463215', 'NOIDA', 'M'),
(3, 'NEHA', '9999999999', 'MUMBAI', 'F'),
(4, 'MEGHA', '9994562399', 'KOLKATA', 'F'),
(5, 'PULKIT', '7895999999', 'LUCKNOW', 'M');

------------------------------------------------------------

INSERT INTO category (cat_id, cat_name)
VALUES
(1, 'BOOKS'),
(2, 'GAMES'),
(3, 'GROCERIES'),
(4, 'ELECTRONICS'),
(5, 'CLOTHES');

------------------------------------------------------------

INSERT INTO product (pro_id, pro_name, pro_desc, cat_id)
VALUES
(1, 'GTA V', 'Windows 7 and above with i5 processor and 8GB RAM', 2),
(2, 'TSHIRT', 'SIZE-L with Black, Blue and White variations', 5),
(3, 'ROG LAPTOP', 'Windows 10 with 15inch screen, i7 processor, 1TB SSD', 4),
(4, 'OATS', 'Highly Nutritious from Nestle', 3),
(5, 'HARRY POTTER', 'Best Collection of all time by J.K Rowling', 1),
(6, 'MILK', '1L Toned MIlk', 3),
(7, 'Boat Earphones', '1.5Meter long Dolby Atmos', 4),
(8, 'Jeans', 'Stretchable Denim Jeans with various sizes and color', 5),
(9, 'Project IGI', 'compatible with windows 7 and above', 2),
(10, 'Hoodie', 'Black GUCCI for 13 yrs and above', 5),
(11, 'Rich Dad Poor Dad', 'Written by RObert Kiyosaki', 1),
(12, 'Train Your Brain', 'By Shireen Stephen', 1);

------------------------------------------------------------

INSERT INTO supplier_pricing (pricing_id, pro_id, supp_id, supp_price)
VALUES
(1, 1, 2, 1500),
(2, 3, 5, 30000),
(3, 5, 1, 3000),
(4, 2, 3, 2500),
(5, 4, 1, 1000);



INSERT INTO order (ord_id, ord_amount, ord_date, cus_id, pricing_id)
VALUES
(101, 1500, '2021-10-06', 2, 1),
(102, 1000, '2021-10-12', 3, 5),
(103, 30000, '2021-09-16', 5, 2),
(104, 1500, '2021-10-05', 1, 1),
(105, 3000, '2021-08-16', 4, 3),
(106, 1450, '2021-08-18', 1, 9),
(107, 789, '2021-09-01', 3, 7),
(108, 780, '2021-09-07', 5, 6),
(109, 3000, '2021-00-10', 5, 3),
(110, 2500, '2021-09-10', 2, 4),
(111, 1000, '2021-09-15', 4, 5),
(112, 789, '2021-09-16', 4, 7),
(113, 31000, '2021-09-16', 1, 8),
(114, 1000, '2021-09-16', 3, 5),
(115, 3000, '2021-09-16', 5, 3),
(116, 99, '2021-09-17', 2, 14);
------------------------------------------------------------------------------------------------------------------------



3) Display the total number of customers based on gender who have placed orders of worth at least Rs.3000.

SELECT gender, COUNT(*) AS total_customers
FROM customer
JOIN order
ON customer.cus_id = order.cus_id
WHERE order.ord_amount >= 3000
GROUP BY gender;


4) Display all the orders along with product name ordered by a customer having Customer_Id=2

SELECT order.ord_id, order.ord_amount, order.ord_date, order.cus_id, order.pricing_id, product.pro_name
FROM order
JOIN product
ON order.pricing_id = product.pricing_id
WHERE customer.cus_id = 2;


5) Display the Supplier details who can supply more than one product.

SELECT supplier.supp_id, supplier.supp_name, supplier.supp_city, supplier.supp_phone
FROM supplier
JOIN supplier_pricing
ON supplier.supp_id = supplier_pricing.supp_id
GROUP BY supplier.supp_id
HAVING COUNT(*) > 1;



6) Find the least expensive product from each category and print the table with category id, name, product name and price of the product

SELECT category.cat_id, category.cat_name, product.pro_name, product.supp_price
FROM category
JOIN product
ON category.cat_id = product.cat_id
ORDER BY product.supp_price;


7) Display the Id and Name of the Product ordered after “2021-10-05”.

SELECT product.pro_id, product.pro_name
FROM product
JOIN order
ON product.pricing_id = order.pricing_id
WHERE order.ord_date > '2021-10-05';


8) Display customer name and gender whose names start or end with character 'A'.

SELECT customer.cus_name, customer.cus_gender
FROM customer
WHERE customer.cus_name LIKE 'A%' OR customer.cus_name LIKE '%A';




9) Create a stored procedure to display supplier id, name, rating and Type_of_Service. For Type_of_Service, If rating =5, print “Excellent Service”,If rating >4 print “Good Service”, If rating >2 print “Average Service” else print “Poor Service”.


DELIMITER $$

CREATE PROCEDURE display_supplier_details()
BEGIN

SELECT supplier.supp_id, supplier.supp_name, rating.rat_ratstars,
CASE
WHEN rating.rat_ratstars = 5 THEN 'Excellent Service'
WHEN rating.rat_ratstars > 4 THEN 'Good Service'
WHEN rating.rat_ratstars > 2 THEN 'Average Service'
ELSE 'Poor Service'
END AS type_of_service
FROM supplier
JOIN rating
ON supplier.supp_id = rating.ord_id;

END $$

DELIMITER ;
